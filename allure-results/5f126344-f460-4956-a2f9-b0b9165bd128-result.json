{"name": "test_successful_login", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.TimeoutError: Page.wait_for_selector: Timeout 30000ms exceeded.\nCall log:\n  - waiting for locator(\"#userSelect\") to be visible", "trace": "self = <graduation_project.Other.tests.test_login_page.TestLoginPage object at 0x000001E2E8D76D50>, page = <Page url='https://www.globalsqa.com/angularJs-protractor/BankingProject/#/login'>\nlogin_page_pl = <Other.pages.login_page.LoginPage object at 0x000001E2E921F360>, account_page_pl = <Other.pages.account_page.AccountPage object at 0x000001E2E921EFD0>\n\n    @allure.story('Тест успешной авторизации')\n    def test_successful_login(self, page, login_page_pl, account_page_pl):\n        \"\"\"\n        Сценарий: Успешный вход\n        Шаги:\n        1. Проверить, что кнопка Customer Login отображается.\n        2. Нажать кнопку Customer Login.\n        3. Проверить, что отображается селект.\n        4. Проверить, что в селекте 5 позиций выбора.\n        5. Выбрать в селекте одно из значений для входа.\n        6. Проверить, что кнопка Login отображается.\n        7. Кликнуть на кнопку Login.\n        8. Проверить, что произошел переход на страницу аккаунта.\n        \"\"\"\n        # login_page_pl.open_url(\"https://www.globalsqa.com/angularJs-protractor/BankingProject/#/login\")\n    \n        # Шаг 1: Проверить, что кнопка Customer Login отображается\n        # button = page.BUTTON_LOGIN_LOCATOR\n        assert login_page_pl.is_visible(BUTTON_LOGIN_LOCATOR), (\n            \"Ожидаемый результат: Кнопка Customer Login отображается. \"\n            \"Фактический результат: Кнопка Customer Login не отобразилась.\"\n        )\n    \n        # Шаг 2: Нажать кнопку Customer Login\n>       login_page_pl.click_customer_login()\n\nOther\\tests\\test_login_page.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nOther\\pages\\login_page.py:12: in click_customer_login\n    self.click(SELECT_LOGIN_LOCATOR)\nOther\\pages\\base_page.py:22: in click\n    element = self.page.wait_for_selector(selector=locator)\n.venv\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:8181: in wait_for_selector\n    self._sync(\n.venv\\Lib\\site-packages\\playwright\\_impl\\_page.py:424: in wait_for_selector\n    return await self._main_frame.wait_for_selector(**locals_to_params(locals()))\n.venv\\Lib\\site-packages\\playwright\\_impl\\_frame.py:323: in wait_for_selector\n    await self._channel.send(\"waitForSelector\", locals_to_params(locals()))\n.venv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x000001E2E8DF7230>, cb = <function Channel.send.<locals>.<lambda> at 0x000001E2E923B880>, is_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Page.wait_for_selector: Timeout 30000ms exceeded.\nE           Call log:\nE             - waiting for locator(\"#userSelect\") to be visible\n\n.venv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError"}, "description": "\nСценарий: Успешный вход\nШаги:\n1. Проверить, что кнопка Customer Login отображается.\n2. Нажать кнопку Customer Login.\n3. Проверить, что отображается селект.\n4. Проверить, что в селекте 5 позиций выбора.\n5. Выбрать в селекте одно из значений для входа.\n6. Проверить, что кнопка Login отображается.\n7. Кликнуть на кнопку Login.\n8. Проверить, что произошел переход на страницу аккаунта.\n", "attachments": [{"name": "screenshot", "source": "f4bfaee6-4dac-45dd-a346-2aefa3065219-attachment.png", "type": "image/png"}], "start": 1741165410798, "stop": 1741165440829, "uuid": "8248cd78-e181-498e-b298-8c8b582394b8", "historyId": "d4ccb4dc96c5b45a1f19f07471d913dc", "testCaseId": "d4ccb4dc96c5b45a1f19f07471d913dc", "fullName": "Other.tests.test_login_page.TestLoginPage#test_successful_login", "labels": [{"name": "feature", "value": "login_page"}, {"name": "story", "value": "Тест успешной авторизации"}, {"name": "parentSuite", "value": "Other.tests"}, {"name": "suite", "value": "test_login_page"}, {"name": "subSuite", "value": "TestLoginPage"}, {"name": "host", "value": "Catherine"}, {"name": "thread", "value": "9268-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Other.tests.test_login_page"}]}