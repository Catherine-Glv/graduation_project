{"name": "test_transactions_table", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.TimeoutError: Page.wait_for_selector: Timeout 30000ms exceeded.\nCall log:\n  - waiting for locator(\"#userSelect\") to be visible", "trace": "self = <graduation_project.Other.tests.test_transactions_page.TestTransactionsPage object at 0x000001E2E8D76FD0>, page = <Page url='https://www.globalsqa.com/angularJs-protractor/BankingProject/#/login'>\nlogin_page_pl = <Other.pages.login_page.LoginPage object at 0x000001E2E921FBB0>, account_page_pl = <Other.pages.account_page.AccountPage object at 0x000001E2E925FBF0>\ntransactions_page_pl = <Other.pages.transactions_page.TransactionsPage object at 0x000001E2E8EC9FD0>\n\n    @allure.story('Тест отображения таблицы транзакций')\n    def test_transactions_table(self, page, login_page_pl, account_page_pl, transactions_page_pl):\n        \"\"\"\n        Сценарий: Отображение таблицы транзакций\n        Шаги авторизации:\n        1. Нажать кнопку Customer Login.\n        2. Кликнуть по селекту и выбрать в селекте одно из значений для входа.\n        3. Кликнуть на кнопку Login.\n        Шаги после авторизации:\n        1. Нажать на кнопку Transactions на странице аккаунта.\n        2. Проверить переход на страницу с таблицей транзакций.\n        3. Проверить отображение таблицы.\n        4. Проверить отображение строк с транзакциями в таблице.\n        5. Нажать кнопку Reset.\n        6. Проверить, что строки из таблицы очистились.\n        7. Нажать на кнопку Back.\n        8. Проверить, что вернулись на страницу аккаунта.\n        \"\"\"\n        # Шаги авторизации\n>       login_page_pl.click_customer_login()\n\nOther\\tests\\test_transactions_page.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nOther\\pages\\login_page.py:12: in click_customer_login\n    self.click(SELECT_LOGIN_LOCATOR)\nOther\\pages\\base_page.py:22: in click\n    element = self.page.wait_for_selector(selector=locator)\n.venv\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:8181: in wait_for_selector\n    self._sync(\n.venv\\Lib\\site-packages\\playwright\\_impl\\_page.py:424: in wait_for_selector\n    return await self._main_frame.wait_for_selector(**locals_to_params(locals()))\n.venv\\Lib\\site-packages\\playwright\\_impl\\_frame.py:323: in wait_for_selector\n    await self._channel.send(\"waitForSelector\", locals_to_params(locals()))\n.venv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x000001E2E8DF7230>, cb = <function Channel.send.<locals>.<lambda> at 0x000001E2E91BAE80>, is_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Page.wait_for_selector: Timeout 30000ms exceeded.\nE           Call log:\nE             - waiting for locator(\"#userSelect\") to be visible\n\n.venv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError"}, "description": "\nСценарий: Отображение таблицы транзакций\nШаги авторизации:\n1. Нажать кнопку Customer Login.\n2. Кликнуть по селекту и выбрать в селекте одно из значений для входа.\n3. Кликнуть на кнопку Login.\nШаги после авторизации:\n1. Нажать на кнопку Transactions на странице аккаунта.\n2. Проверить переход на страницу с таблицей транзакций.\n3. Проверить отображение таблицы.\n4. Проверить отображение строк с транзакциями в таблице.\n5. Нажать кнопку Reset.\n6. Проверить, что строки из таблицы очистились.\n7. Нажать на кнопку Back.\n8. Проверить, что вернулись на страницу аккаунта.\n", "attachments": [{"name": "screenshot", "source": "d681afb8-1589-4283-b7cf-49c0278195b0-attachment.png", "type": "image/png"}], "start": 1741165444775, "stop": 1741165474788, "uuid": "0c3bcd0b-b340-4d75-ada1-65b4c05f53a5", "historyId": "ead31ac6bc0292897a7c8559ef9a6768", "testCaseId": "ead31ac6bc0292897a7c8559ef9a6768", "fullName": "Other.tests.test_transactions_page.TestTransactionsPage#test_transactions_table", "labels": [{"name": "feature", "value": "transactions_page"}, {"name": "story", "value": "Тест отображения таблицы транзакций"}, {"name": "parentSuite", "value": "Other.tests"}, {"name": "suite", "value": "test_transactions_page"}, {"name": "subSuite", "value": "TestTransactionsPage"}, {"name": "host", "value": "Catherine"}, {"name": "thread", "value": "9268-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Other.tests.test_transactions_page"}]}